kotlin version: 2.0.21
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: C:/Users/anth0/Leviia/Adrar/2025/sdv/rennes/25_05_sdv_rennes_a/app/src/main/java/com/amonteiro/a25_05_sdv_rennes_a/model/Beans.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:246)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:142)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:148)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:103)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:49)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally$lambda$9$compile(IncrementalCompilerRunner.kt:249)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.tryCompileIncrementally(IncrementalCompilerRunner.kt:267)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:120)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:675)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1660)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:main visibility:public modality:FINAL <> () returnType:kotlin.Unit
  BLOCK_BODY
    VAR name:t1 type:com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var]
      CONSTRUCTOR_CALL 'public constructor <init> (min: kotlin.Int, max: kotlin.Int, value: kotlin.Int) [primary] declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean origin=null
        min: CONST Int type=kotlin.Int value=-20
        max: CONST Int type=kotlin.Int value=50
        value: CONST Int type=kotlin.Int value=0
    CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt' type=kotlin.Unit origin=null
      message: STRING_CONCATENATION type=kotlin.String
        CONST String type=kotlin.String value="Température de "
        BLOCK type=kotlin.Int? origin=FOLDED_SAFE_CALL
          WHEN type=kotlin.Int? origin=FOLDED_SAFE_CALL
            BRANCH
              if: COMPOSITE type=kotlin.Boolean origin=null
                VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [val]
                  GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
                CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                  $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                    arg0: GET_VAR 'val tmp0_safe_receiver: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [val] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
                    arg1: CONST Null type=kotlin.Nothing? value=null
              then: CALL 'public final fun <get-value> (): kotlin.Int declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=kotlin.Int origin=GET_PROPERTY
                $this: GET_VAR 'val tmp0_safe_receiver: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [val] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CONST Null type=kotlin.Nothing? value=null
    SET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=kotlin.Unit origin=EQ
      CONST Null type=kotlin.Nothing? value=null
    CALL 'public final fun <set-value> (newValue: kotlin.Int): kotlin.Unit [fake_override] declared in kotlin.Nothing' type=kotlin.Unit origin=EQ
      $this: BLOCK type=kotlin.Nothing origin=null
        CALL 'public final fun CHECK_NOT_NULL <T0> (arg0: T0 of kotlin.internal.ir.CHECK_NOT_NULL?): {T0 of kotlin.internal.ir.CHECK_NOT_NULL & Any} declared in kotlin.internal.ir' type=kotlin.Nothing origin=EXCLEXCL
          <T0>: kotlin.Nothing
          arg0: GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
        CALL 'public final fun throwKotlinNothingValueException (): kotlin.Nothing declared in kotlin.jvm.internal.Intrinsics' type=kotlin.Nothing origin=null
      newValue: CONST Int type=kotlin.Int value=10
    CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt' type=kotlin.Unit origin=null
      message: STRING_CONCATENATION type=kotlin.String
        CONST String type=kotlin.String value="Température de "
        CALL 'public final fun <get-value> (): kotlin.Int declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=kotlin.Int origin=GET_PROPERTY
          $this: TYPE_OP type=kotlin.Nothing origin=IMPLICIT_CAST typeOperand=kotlin.Nothing
            GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
    CALL 'public final fun <set-value> (newValue: kotlin.Int): kotlin.Unit declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=kotlin.Unit origin=EQ
      $this: TYPE_OP type=kotlin.Nothing origin=IMPLICIT_CAST typeOperand=kotlin.Nothing
        GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
      newValue: CONST Int type=kotlin.Int value=-30
    CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt' type=kotlin.Unit origin=null
      message: STRING_CONCATENATION type=kotlin.String
        CONST String type=kotlin.String value="Température de "
        CALL 'public final fun <get-value> (): kotlin.Int declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=kotlin.Int origin=GET_PROPERTY
          $this: TYPE_OP type=kotlin.Nothing origin=IMPLICIT_CAST typeOperand=kotlin.Nothing
            GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
    CALL 'public final fun <set-value> (newValue: kotlin.Int): kotlin.Unit declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=kotlin.Unit origin=EQ
      $this: TYPE_OP type=kotlin.Nothing origin=IMPLICIT_CAST typeOperand=kotlin.Nothing
        GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
      newValue: CONST Int type=kotlin.Int value=100
    CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt' type=kotlin.Unit origin=null
      message: STRING_CONCATENATION type=kotlin.String
        CONST String type=kotlin.String value="Température de "
        CALL 'public final fun <get-value> (): kotlin.Int declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=kotlin.Int origin=GET_PROPERTY
          $this: TYPE_OP type=kotlin.Nothing origin=IMPLICIT_CAST typeOperand=kotlin.Nothing
            GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null
    SET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=kotlin.Unit origin=EQ
      CONSTRUCTOR_CALL 'public constructor <init> (min: kotlin.Int, max: kotlin.Int, value: kotlin.Int) [primary] declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean origin=null
        min: CONST Int type=kotlin.Int value=-20
        max: CONST Int type=kotlin.Int value=50
        value: CONST Int type=kotlin.Int value=-100
    CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt' type=kotlin.Unit origin=null
      message: STRING_CONCATENATION type=kotlin.String
        CONST String type=kotlin.String value="Température de "
        CALL 'public final fun <get-value> (): kotlin.Int declared in com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean' type=kotlin.Int origin=GET_PROPERTY
          $this: GET_VAR 'var t1: com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? [var] declared in com.amonteiro.a25_05_sdv_rennes_a.model.BeansKt.main' type=com.amonteiro.a25_05_sdv_rennes_a.model.ThermometerBean? origin=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:40)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:406)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:423)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:168)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 44 more
Caused by: java.lang.IllegalStateException: Fake override should have at least one overridden descriptor: FUN FAKE_OVERRIDE name:<set-value> visibility:public modality:FINAL <> ($this:kotlin.Nothing, newValue:kotlin.Int) returnType:kotlin.Unit [fake_override]
	at org.jetbrains.kotlin.backend.jvm.ir.JvmIrUtilsKt.findSuperDeclaration(JvmIrUtils.kt:408)
	at org.jetbrains.kotlin.backend.jvm.mapping.MethodSignatureMapper.findSuperDeclaration(MethodSignatureMapper.kt:443)
	at org.jetbrains.kotlin.backend.jvm.mapping.MethodSignatureMapper.mapToCallableMethod(MethodSignatureMapper.kt:412)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:605)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:584)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:240)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:123)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:44)
	... 54 more


